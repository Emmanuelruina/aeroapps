version: '3.7'

services:
  python-alerts-backend:
    image: "ghcr.io/flightaware/aeroapps/python-alerts-backend:${AEROAPPS_VERSION:-latest}"
    volumes:
      - "aeroapi_alerts:/var/db/aeroapi_alerts"
    profiles: ["python"]
    build:
      context: .
      dockerfile: alerts_backend/python/Dockerfile
    networks:
      internal:
        aliases:
          - alerts-backend
    environment:
      - AEROAPI_KEY=${AEROAPI_KEY:?AEROAPI_KEY variable must be set}
    logging:
      driver: "json-file"
      options:
        max-size: "10mb"
        max-file: "5"

  # Create separate Docker service to handle only POST requests to server, default port is 8081
  # Note that the port mapped is 5000 instead of 80, and the endpoint URL MUST use /post, not /api/post
  python-alerts-endpoint-backend:
    image: "ghcr.io/flightaware/aeroapps/python-alerts-backend:${AEROAPPS_VERSION:-latest}"
    volumes:
      - "aeroapi_alerts:/var/db/aeroapi_alerts"
    profiles: [ "python" ]
    build:
      context: .
      dockerfile: alerts_backend/python/Dockerfile
    ports:
      - "${POST_PORT:-8081}:5000"
    networks:
      internal:
        aliases:
          - alerts-backend
    environment:
      - AEROAPI_KEY=${AEROAPI_KEY:?AEROAPI_KEY variable must be set}
    logging:
      driver: "json-file"
      options:
        max-size: "10mb"
        max-file: "5"

  alerts-frontend:
    image: "ghcr.io/flightaware/alerts_frontend/alerts-frontend:${ALERTS_VERSION:-latest}"
    profiles: ["python"]
    ports:
      # Port upon which to serve webapp
      - "${WEB_SERVER_PORT:-8080}:80"
    networks:
      - internal
    logging:
      driver: "json-file"
      options:
        max-size: "10mb"
        max-file: "5"

networks:
  internal:

volumes:
  aeroapi_alerts:
    name: aeroapi_alerts
    external: false
